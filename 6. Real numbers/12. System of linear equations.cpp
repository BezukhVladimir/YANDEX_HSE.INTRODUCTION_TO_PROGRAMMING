//Даны вещественные числа a, b, c, d, e, f. Решите систему линейных уравнений.
//
//Формат входных данных
//Вводятся шесть чисел - коэффициенты уравнений системы.
//
//Формат выходных данных
//Вывод программы зависит от вида решения этой системы.
//
//Если система не имеет решений, то программа должна вывести единственное число 0.
//
//Если система имеет бесконечно много решений, каждое из которых имеет вид y=kx+n, то программа должна вывести число 1, а затем значения k и n.
//
//Если система имеет единственное решение (x0, y0), то программа должна вывести число 2, а затем значения x0 и y0.
//
//Если система имеет бесконечно много решений вида x=x0, y — любое, то программа должна вывести число 3, а затем значение x0.
//
//Если система имеет бесконечно много решений вида y=y0, x — любое, то программа должна вывести число 4, а затем значение y0.
//
//Если любая пара чисел (x, y)  является решением, то программа должна вывести число 5.
//
//Sample Input 1:
//1
//0
//0
//1
//3
//3
//
//Sample Output 1:
//2 3 3
//
//Sample Input 2:
//1
//1
//2
//2
//1
//2
//
//Sample Output 2:
//1 -1 1
//
//Sample Input 3:
//0
//2
//0
//4
//1
//2
//
//Sample Output 3:
//4 0.5
//
//Sample Input 4:
//2
//3
//4
//6
//1
//2
//
//Sample Output 4:
//1 -0.666667 0.333333
//
//Sample Input 5:
//0
//1
//0
//3
//5
//15
//
//Sample Output 5:
//4 5
//
//Sample Input 6:
//1
//0
//1
//0
//3
//3
//
//Sample Output 6:
//3 3

#include <iostream>

using namespace std;

int main()
{
    double a, b, c, d, e, f; // коэффициенты и свободные члены системы из двух линейных алгебраических уравнений.
    cin >> a >> b >> c >> d >> e >> f;

    double determinant   = a * d - c * b, // определитель матрицы системы
           determinant_x = e * d - f * b, // определитель расширенной матрицы системы относительно y
           determinant_y = a * f - c * e; // определитель расширенной матрицы системы относительно x

    if (determinant) { // Если общий минор второго порядка отличен от нуля...
        /*
         * ... значит ранги обеих матриц равны 2,
         * поэтому применяем метод Крамера.
         * Общий минор второго порядка вычисляется точно так же,
         * как и определитель матрицы системы.
         */

        cout << 2 << ' ' << determinant_x / determinant << ' '
                         << determinant_y / determinant;
        return 0;
    } else { // Иначе, если общий минор второго порядка равен нулю, то...
        if (determinant_x != 0.0  // Если ранги матрицы системы и
         || determinant_y != 0.0) // расширенной матрицы системы различаются, то...
            cout << 0; // ... решений нет.
        else {
            if (a == 0.0 && b == 0.0
             && c == 0.0 && d == 0.0) { // Если все коэффициенты равны нулю, то...

                if (e == 0.0 && f == 0.0) { // Если оба свободных члена равны нулю, то...
                    cout << 5; // ... существует бесконечное число решений СЛАУ.
                    return 0;
                } else { // Иначе, если есть хоть один отличный от нуля свободный член, то...
                    cout << 0; // ... СЛАУ не имеет решения.
                    return 0;
                }
            } else if (a == 0.0 && c == 0.0) { // Иначе, если оба коэффициента перед X равны нулю...
                /*
                 * ... то есть система имеет бесконечное число решений
                 * вида (X — любое число, Y — единственное число),
                 * тогда...
                 */

                if (b) { // Если коэффициент перед Y в первом уравнении системы отличен от нуля, то...
                    cout << 4 << ' ' << e / b; // ... находим единственное значение Y.
                    return 0;
                } else {// Иначе используем коэффициент из второго уравнения системы (т.к. на ноль делить нельзя)...
                    cout << 4 << ' ' << f / d; // ... находим единственное значение Y.
                    return 0;
                }
            } else if (b == 0.0 && d == 0.0) { // Иначе, если оба коэффициента перед Y равны нулю...
                /*
                 * ... то есть система имеет бесконечное число решений
                 * вида (X — любое число, Y — единственное число),
                 * тогда...
                 */

                if (a) { // Если коэффициент перед X в первом уравнении системы отличен от нуля, то...
                    cout << 3 << ' ' << e / a; // ... находим единственное значение X.
                    return 0;
                } else { // Иначе используем коэффициент из второго уравнения системы (т.к. на ноль делить нельзя)...
                    cout << 3 << ' ' << f / c; // ... находим единственное значение X.
                    return 0;
                }
            } else { // Иначе, если количество нулевых коэффициентов нечётное или они вовсе отсутствуют...
                /*
                 * ... то есть система имеет бесконечное число решений,
                 * каждое из которых имеет вид Y = kX + n,
                 * где k — коэффициент, n — свободный член,
                 * тогда...
                 */

                if (b) { // Если коэффициент перед Y в первом уравнении системы отличен от нуля, то...
                    cout << 1 << ' ' << -(a / b) << ' ' << e / b; // ... находим k и n.
                    return 0;
                } else { // Иначе используем коэффициент из второго уравнения системы (т.к. на ноль делить нельзя)...
                    cout << 1 << ' ' << -(c / d) << ' ' << f / d; // ... находим единственное значение X.
                    return 0;
                }
            }
        }
    }
}